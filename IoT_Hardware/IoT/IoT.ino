#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// ========== C·∫§U H√åNH WIFI ==========
const char* ssid = "Neb Neee";        // T√™n m·∫°ng WiFi c·∫ßn k·∫øt n·ªëi
const char* password = "012345678";   // M·∫≠t kh·∫©u WiFi

// ========== C·∫§U H√åNH MQTT BROKER ==========
const char* mqtt_server = "192.168.180.176";  // ƒê·ªãa ch·ªâ IP c·ªßa MQTT broker (m√°y ch·ªß)
const int mqtt_port = 1883;                   // C·ªïng MQTT (m·∫∑c ƒë·ªãnh 1883)
const char* mqtt_user = "adminiot";           // T√™n ƒëƒÉng nh·∫≠p MQTT
const char* mqtt_pass = "adminiot";           // M·∫≠t kh·∫©u MQTT

// ========== KH·ªûI T·∫†O CLIENT ==========
WiFiClient espClient;           // T·∫°o client WiFi
PubSubClient client(espClient); // T·∫°o client MQTT s·ª≠ d·ª•ng WiFi client

// ========== C·∫§U H√åNH CH√ÇN GPIO ==========
#define DHTPIN 16       // GPIO16: Ch√¢n DATA c·ªßa c·∫£m bi·∫øn DHT11
#define DHTTYPE DHT11   // Lo·∫°i c·∫£m bi·∫øn nhi·ªát ƒë·ªô/ƒë·ªô ·∫©m l√† DHT11
#define DIEUHOA 18      // GPIO18: Ch√¢n ƒëi·ªÅu khi·ªÉn relay ƒëi·ªÅu h√≤a
#define QUAT 13         // GPIO13: Ch√¢n ƒëi·ªÅu khi·ªÉn relay qu·∫°t
#define DEN 26          // GPIO26: Ch√¢n ƒëi·ªÅu khi·ªÉn relay ƒë√®n
#define LDR_PIN 32      // GPIO32: Ch√¢n analog ƒë·ªçc c·∫£m bi·∫øn √°nh s√°ng LDR

// ========== KH·ªûI T·∫†O C·∫¢M BI·∫æN DHT ==========
DHT dht(DHTPIN, DHTTYPE);   // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng c·∫£m bi·∫øn DHT11

// ========== BI·∫æN TH·ªúI GIAN ==========
unsigned long lastMsg = 0;   // L∆∞u th·ªùi ƒëi·ªÉm g·ª≠i message cu·ªëi c√πng (s·ª≠ d·ª•ng unsigned long ƒë·ªÉ tr√°nh overflow)

// ========== C·∫§U H√åNH ADC ==========
const uint8_t adcBits = 12;       // ƒê·ªô ph√¢n gi·∫£i ADC c·ªßa ESP32: 12-bit (0-4095)
const uint16_t adcMaxValue = 4095; // Gi√° tr·ªã t·ªëi ƒëa c·ªßa ADC 12-bit

// ========== QU·∫¢N L√ù TR·∫†NG TH√ÅI THI·∫æT B·ªä ==========
uint8_t deviceStates = 0;

// H√†m ƒë·ªçc tr·∫°ng th√°i thi·∫øt b·ªã t·ª´ bit flags
inline bool getDeviceState(uint8_t device) { 
  return (deviceStates >> device) & 1; 
}

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã v√†o bit flags
inline void setDeviceState(uint8_t device, bool state) { 
  if (state) 
    deviceStates |= (1 << device);   // Set bit th√†nh 1 (B·∫¨T)
  else 
    deviceStates &= ~(1 << device);  // Set bit th√†nh 0 (T·∫ÆT)
}

// ========== MACRO T√åM KI·∫æM NHANH ==========
#define DEVICE_COUNT 3  // S·ªë l∆∞·ª£ng thi·∫øt b·ªã c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn

// ========== H√ÄM K·∫æT N·ªêI WIFI ==========
void setup_wifi() {
  delay(10);  // ƒê·ª£i h·ªá th·ªëng ·ªïn ƒë·ªãnh
  
  Serial.print("ƒêang k·∫øt n·ªëi WiFi: ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);  // Ch·∫ø ƒë·ªô Station (client), kh√¥ng ph·∫£i Access Point
  WiFi.begin(ssid, password);  // B·∫Øt ƒë·∫ßu k·∫øt n·ªëi ƒë·∫øn WiFi
  
  // Ch·ªù k·∫øt n·ªëi WiFi th√†nh c√¥ng
  uint8_t attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) { 
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");
    Serial.print("üì° IP ESP32: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå K·∫øt n·ªëi WiFi th·∫•t b·∫°i!");
  }
}

// ========== H√ÄM G·ª¨I PH·∫¢N H·ªíI TR·∫†NG TH√ÅI ==========
void sendDeviceFeedback(const char* device, const char* state) {
  char topic[30];
  snprintf(topic, sizeof(topic), "esp32/%s", device);  // T·∫°o topic: esp32/dieuhoa, esp32/quat, esp32/den
  
  if (client.publish(topic, state, false)) {  // Publish message (retain=false)
    Serial.printf("üì§ Ph·∫£n h·ªìi: %s -> %s\n", topic, state);
  }
  
  delay(50);  // Delay nh·ªè ƒë·∫£m b·∫£o message ƒë∆∞·ª£c g·ª≠i ho√†n to√†n
}

// ========== H√ÄM CALLBACK MQTT ==========
void callback(char* topic, byte* payload, unsigned int length) {
  // Parse tr·∫°ng th√°i ON/OFF tr·ª±c ti·∫øp t·ª´ payload (ti·∫øt ki·ªám RAM)
  bool isOn = (length >= 2 && payload[0] == 'O' && payload[1] == 'N');
  
  Serial.printf("üì© Nh·∫≠n l·ªánh [%s]: %s\n", topic, isOn ? "ON" : "OFF");

  // ========== LOOKUP TABLE CHO THI·∫æT B·ªä ==========
  // C·∫•u tr√∫c l∆∞u th√¥ng tin c·ªßa m·ªói thi·∫øt b·ªã
  struct DeviceConfig {
    const char* topicSuffix;  // T√™n thi·∫øt b·ªã trong topic (dieuhoa, quat, den)
    uint8_t pin;              // Ch√¢n GPIO ƒëi·ªÅu khi·ªÉn relay
    uint8_t deviceIndex;      // Index trong bit flags (0, 1, 2)
    const char* name;         // T√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát
  };
  
  // B·∫£ng tra c·ª©u thi·∫øt b·ªã (l∆∞u trong FLASH, ti·∫øt ki·ªám RAM)
  static const DeviceConfig devices[DEVICE_COUNT] = {
    {"dieuhoa", DIEUHOA, 2, "ƒêi·ªÅu h√≤a"},
    {"quat",    QUAT,    1, "Qu·∫°t"},
    {"den",     DEN,     0, "ƒê√®n"}
  };
  
  // T√¨m thi·∫øt b·ªã t∆∞∆°ng ·ª©ng trong lookup table
  for (uint8_t i = 0; i < DEVICE_COUNT; i++) {
    char fullTopic[30];
    snprintf(fullTopic, sizeof(fullTopic), "esp32/%s", devices[i].topicSuffix);
    
    // So s√°nh topic nh·∫≠n ƒë∆∞·ª£c v·ªõi topic c·ªßa thi·∫øt b·ªã
    if (strcmp(topic, fullTopic) == 0) {
      bool currentState = getDeviceState(devices[i].deviceIndex);
      
      // Ch·ªâ th·ª±c hi·ªán n·∫øu tr·∫°ng th√°i thay ƒë·ªïi
      if (currentState != isOn) {
        digitalWrite(devices[i].pin, isOn ? HIGH : LOW);  // ƒêi·ªÅu khi·ªÉn relay
        setDeviceState(devices[i].deviceIndex, isOn);     // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong RAM
        Serial.printf("üîß %s: %s\n", devices[i].name, isOn ? "B·∫¨T ‚úÖ" : "T·∫ÆT ‚ùå");
        
        // G·ª≠i ph·∫£n h·ªìi x√°c nh·∫≠n v·ªÅ backend
        sendDeviceFeedback(devices[i].topicSuffix, isOn ? "ON" : "OFF");
      } else {
        Serial.printf("‚è≠Ô∏è  %s: B·ªè qua (ƒë√£ %s)\n", devices[i].name, isOn ? "B·∫¨T" : "T·∫ÆT");
      }
      break;  // ƒê√£ t√¨m th·∫•y, tho√°t v√≤ng l·∫∑p
    }
  }
}

// ========== H√ÄM K·∫æT N·ªêI L·∫†I MQTT ==========
void reconnect() {
  while (!client.connected()) {
    Serial.print("üîÑ ƒêang k·∫øt n·ªëi MQTT broker...");
    
    // K·∫øt n·ªëi v·ªõi Last Will Testament (LWT)
    // LWT s·∫Ω t·ª± ƒë·ªông g·ª≠i "offline" khi ESP32 m·∫•t k·∫øt n·ªëi ƒë·ªôt ng·ªôt
    if (client.connect("ESP32Client", mqtt_user, mqtt_pass, 
                       "esp32/status", 1, true, "offline")) {
      Serial.println(" ‚úÖ Th√†nh c√¥ng!");
      
      // G·ª≠i tr·∫°ng th√°i online (retained message)
      client.publish("esp32/status", "online", true);
      Serial.println("üì§ ƒê√£ g·ª≠i: esp32/status -> online");
      
      // Subscribe c√°c topic ƒëi·ªÅu khi·ªÉn
      client.subscribe("esp32/dieuhoa");
      client.subscribe("esp32/quat");
      client.subscribe("esp32/den");
      Serial.println("üì• ƒê√£ subscribe: esp32/dieuhoa, esp32/quat, esp32/den");
      
      // Y√™u c·∫ßu ƒë·ªìng b·ªô tr·∫°ng th√°i v·ªõi database
      client.publish("esp32/sync_request", "sync", false);
      Serial.println("üîÑ Y√™u c·∫ßu ƒë·ªìng b·ªô tr·∫°ng th√°i t·ª´ database");
      
    } else {
      // K·∫øt n·ªëi th·∫•t b·∫°i, hi·ªÉn th·ªã m√£ l·ªói
      Serial.printf(" ‚ùå Th·∫•t b·∫°i! M√£ l·ªói: %d\n", client.state());
      Serial.println("‚è≥ Th·ª≠ l·∫°i sau 5 gi√¢y...");
      delay(5000);
    }
  }
}

// ========== H√ÄM SETUP (CH·∫†Y 1 L·∫¶N KHI KH·ªûI ƒê·ªòNG) ==========
// - K·∫øt n·ªëi WiFi
// - K·∫øt n·ªëi MQTT broker
// - C·∫•u h√¨nh c·∫£m bi·∫øn DHT11 v√† ADC
void setup() {
  // Kh·ªüi t·∫°o Serial Monitor v·ªõi baudrate 115200
  Serial.begin(115200);
  delay(100);
  Serial.println("\n\n========================================");
  Serial.println("üöÄ ESP32 IoT Controller Starting...");
  Serial.println("========================================");
  
  // C·∫•u h√¨nh ch√¢n GPIO l√† OUTPUT ƒë·ªÉ ƒëi·ªÅu khi·ªÉn relay
  pinMode(DIEUHOA, OUTPUT);
  pinMode(QUAT, OUTPUT);
  pinMode(DEN, OUTPUT);
  Serial.println("‚öôÔ∏è  GPIO ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh");

  // ƒê·∫∑t t·∫•t c·∫£ thi·∫øt b·ªã v·ªÅ tr·∫°ng th√°i T·∫ÆT ban ƒë·∫ßu
  digitalWrite(DIEUHOA, LOW);
  digitalWrite(QUAT, LOW);
  digitalWrite(DEN, LOW);
  Serial.println("üîå Thi·∫øt b·ªã kh·ªüi t·∫°o: T·∫ÆT");

  // Kh·ªüi ƒë·ªông c·∫£m bi·∫øn DHT11
  dht.begin();
  Serial.println("üå°Ô∏è  DHT11 ƒë√£ kh·ªüi ƒë·ªông");

  // K·∫øt n·ªëi WiFi
  setup_wifi();

  // C·∫•u h√¨nh MQTT server v√† callback
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  Serial.printf("üì° MQTT server: %s:%d\n", mqtt_server, mqtt_port);

  // C·∫•u h√¨nh ƒë·ªô ph√¢n gi·∫£i ADC cho c·∫£m bi·∫øn √°nh s√°ng
  analogReadResolution(adcBits);
  Serial.printf("üìä ADC: %d-bit (0-%d)\n", adcBits, adcMaxValue);

  Serial.println("========================================");
  Serial.println("‚úÖ Kh·ªüi ƒë·ªông th√†nh c√¥ng!");
  Serial.println("========================================\n");
}

// ========== H√ÄM LOOP (CH·∫†Y LI√äN T·ª§C) ==========
// - G·ª≠i d·ªØ li·ªáu l√™n MQTT broker
// - G·ª≠i heartbeat ƒë·ªÉ backend bi·∫øt ESP32 c√≤n ho·∫°t ƒë·ªông
void loop() {
  // Ki·ªÉm tra k·∫øt n·ªëi MQTT, reconnect n·∫øu b·ªã m·∫•t
  if (!client.connected()) {
    reconnect();
  }
  client.loop();  // X·ª≠ l√Ω c√°c message MQTT ƒë·∫øn

  unsigned long now = millis();
  
  // G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn m·ªói 1 gi√¢y (1000ms)
  if (now - lastMsg >= 1000) {
    lastMsg = now;

    // ========== ƒê·ªåC C·∫¢M BI·∫æN DHT11 ==========
    float h = dht.readHumidity();       // ƒê·ªçc ƒë·ªô ·∫©m (%)
    float t = dht.readTemperature();    // ƒê·ªçc nhi·ªát ƒë·ªô (¬∞C)

    // ========== ƒê·ªåC C·∫¢M BI·∫æN √ÅNH S√ÅNG LDR ==========
    // ƒê·∫£o ng∆∞·ª£c gi√° tr·ªã ADC v√¨ LDR cho gi√° tr·ªã cao khi t·ªëi
    uint16_t rawLight = analogRead(LDR_PIN);
    uint16_t lightValue = map(rawLight, 0, adcMaxValue, adcMaxValue, 0);

    // ========== G·ª¨I D·ªÆ LI·ªÜU L√äN MQTT ==========
    // Ch·ªâ g·ª≠i nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m n·∫øu ƒë·ªçc th√†nh c√¥ng (kh√¥ng NaN)
    if (!isnan(h) && !isnan(t)) {
      char tempStr[10], humStr[10];
      dtostrf(t, 4, 2, tempStr);  // Chuy·ªÉn float sang string (ti·∫øt ki·ªám RAM)
      dtostrf(h, 4, 2, humStr);
      
      client.publish("esp32/temperature", tempStr, false);
      client.publish("esp32/humidity", humStr, false);
    }
    
    // G·ª≠i gi√° tr·ªã √°nh s√°ng
    char lightStr[10];
    itoa(lightValue, lightStr, 10);
    client.publish("esp32/light", lightStr, false);

    // G·ª≠i heartbeat ƒë·ªÉ backend bi·∫øt ESP32 c√≤n ho·∫°t ƒë·ªông
    client.publish("esp32/heartbeat", "alive", false);

    // Hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n Serial Monitor
    Serial.printf("üìä Nhi·ªát ƒë·ªô: %.1f¬∞C | ƒê·ªô ·∫©m: %.1f%% | √Ånh s√°ng: %d Lux | ‚ù§Ô∏è  Heartbeat\n",
                  t, h, lightValue);
  }
}
