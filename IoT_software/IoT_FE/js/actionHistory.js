// ========== ACTION HISTORY PAGE LOGIC ==========
// Logic cho trang l·ªãch s·ª≠ h√†nh ƒë·ªông

// C√°c h·∫±ng s·ªë
const API_URL = `${window.API_ROOT}/api/actionHistory/filter`; // URL API l·ªçc l·ªãch s·ª≠

// T√™n v√† icon thi·∫øt b·ªã
const DEVICE_NAMES = { 
  den: 'ƒê√®n', // T√™n thi·∫øt b·ªã ƒë√®n
  quat: 'Qu·∫°t', // T√™n thi·∫øt b·ªã qu·∫°t
  dieuhoa: 'ƒêi·ªÅu h√≤a' // T√™n thi·∫øt b·ªã ƒëi·ªÅu h√≤a
};

const DEVICE_ICONS = { 
  den: 'fa-lightbulb', // Icon ƒë√®n
  quat: 'fa-fan', // Icon qu·∫°t
  dieuhoa: 'fa-snowflake' // Icon ƒëi·ªÅu h√≤a
};

// C√°c bi·∫øn tr·∫°ng th√°i
let currentPage = 1; // Trang hi·ªán t·∫°i
let pageSize = 10; // S·ªë item m·ªói trang
let currentDevice = 'all'; // Thi·∫øt b·ªã hi·ªán t·∫°i (all = t·∫•t c·∫£)
let currentState = 'all'; // Tr·∫°ng th√°i hi·ªán t·∫°i (all = t·∫•t c·∫£)
let currentSearch = ''; // T·ª´ kh√≥a t√¨m ki·∫øm hi·ªán t·∫°i
let totalPages = 1; // T·ªïng s·ªë trang

// Tham chi·∫øu c√°c element DOM (kh√¥ng c·∫ßn n·ªØa khi d√πng component chung)
// const el = { ... }; // ƒê√£ x√≥a v√¨ s·ª≠ d·ª•ng component chung

// H√†m kh·ªüi t·∫°o trang l·ªãch s·ª≠ h√†nh ƒë·ªông
window.initializeActionHistory = async function() {
  console.log("üöÄ Initializing Action History page..."); // Th√¥ng b√°o b·∫Øt ƒë·∫ßu kh·ªüi t·∫°o
  
  // Load navbar component
  await window.loadNavbar('actionhistory'); // T·∫£i navbar v·ªõi active page
  
  // getDOMElements(); // Kh√¥ng c·∫ßn n·ªØa khi d√πng component chung
  
  setupEventListeners(); // Thi·∫øt l·∫≠p event listener
  
  setupPageSizeSelector(); // Thi·∫øt l·∫≠p dropdown ch·ªçn s·ªë item
  
  fetchActions(1);
  
  console.log("‚úÖ Action History page initialized");
};

// Get DOM elements (ƒë√£ x√≥a v√¨ s·ª≠ d·ª•ng component chung)
// H√†m l·∫•y c√°c element DOM
// function getDOMElements() { ... } // ƒê√£ x√≥a v√¨ kh√¥ng c·∫ßn n·ªØa

// Setup event listeners
// H√†m thi·∫øt l·∫≠p c√°c event listener (s·ª≠ d·ª•ng component chung)
function setupEventListeners() {
  // S·ª≠ d·ª•ng component chung ƒë·ªÉ setup search form listeners
  window.setupSearchFormListeners({
    searchBtnId: "search-btn",     // ID n√∫t t√¨m ki·∫øm
    searchInputId: "keywordFilter", // ID √¥ nh·∫≠p t·ª´ kh√≥a
    filterIds: ["deviceFilter", "stateFilter"], // M·∫£ng ID c√°c dropdown filter
    onSearch: () => fetchActions(1) // Callback khi search
  });
}

// Setup page size selector
// H√†m thi·∫øt l·∫≠p dropdown ch·ªçn s·ªë item m·ªói trang (s·ª≠ d·ª•ng component chung)
function setupPageSizeSelector() {
  // S·ª≠ d·ª•ng component chung t·ª´ pagination.js
  const select = window.createPageSizeSelector(pageSize, 'page-limit-box');
  
  // G·∫Øn event listener cho select
  if (select) {
    select.addEventListener('change', (e) => {
      pageSize = parseInt(e.target.value) || 10; // C·∫≠p nh·∫≠t s·ªë item m·ªói trang
      fetchActions(1); // T·∫£i l·∫°i d·ªØ li·ªáu trang 1
    });
  }
}

// Fetch actions from API
async function fetchActions(page = 1) {
  try {
    console.log('üîç Fetching actions for page:', page); // Debug log
    currentPage = page;
    
    // Update state from DOM
    // L·∫•y gi√° tr·ªã t·ª´ c√°c element DOM tr·ª±c ti·∫øp
    const deviceFilter = document.getElementById('deviceFilter');
    const stateFilter = document.getElementById('stateFilter');
    const keywordInput = document.getElementById('keywordFilter');
    
    currentDevice = deviceFilter ? deviceFilter.value || 'all' : 'all';
    currentState = stateFilter ? stateFilter.value || 'all' : 'all';
    currentSearch = keywordInput ? (keywordInput.value || '').trim() : '';

    const params = new URLSearchParams({ page, pageSize });
    if (currentDevice && currentDevice !== 'all') params.append('device', currentDevice);
    if (currentState && currentState !== 'all') params.append('state', currentState);
    if (currentSearch) params.append('search', currentSearch);

    const url = `${API_URL}?${params.toString()}`;
    console.log('üì° API URL:', url); // Debug log
    const res = await fetch(url);
    if (!res.ok) {
      const txt = await res.text();
      console.error('API error:', txt);
      const dataBody = document.getElementById('data-body');
      if (dataBody) {
        dataBody.innerHTML = `<tr><td colspan="4" class="text-center small text-danger">L·ªói API: ${txt}</td></tr>`;
      }
      return;
    }

    const json = await res.json();
    const data = Array.isArray(json.data) ? json.data : [];
    totalPages = Math.max(1, json.totalPages || 1);

    renderTable(data, page);
    window.renderPagination(page, totalPages);

  } catch (err) {
    console.error('Fetch actions error:', err);
    const dataBody = document.getElementById('data-body');
    if (dataBody) {
      dataBody.innerHTML = `<tr><td colspan="4" class="text-center small text-danger">L·ªói khi t·∫£i d·ªØ li·ªáu</td></tr>`;
    }
  }
}

// Render table
function renderTable(data, page) {
  const dataBody = document.getElementById('data-body');
  if (!dataBody) return;
  
  const startIndex = (page - 1) * pageSize;
  if (!data || !data.length) {
    dataBody.innerHTML = `<tr><td colspan="4" class="text-center small">Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p</td></tr>`;
    return;
  }

  const rows = data.map((rec, idx) => {
    const id = startIndex + idx + 1;
    const deviceLabel = DEVICE_NAMES[rec.device] || rec.device || '-';
    const icon = DEVICE_ICONS[rec.device] || 'fa-question';
    const state = rec.state || '-';
    const statusClass = state === 'ON' ? 'status-on' : 'status-off';
    const timeText = rec.timeStr || window.formatDate(rec.timestamp);

    return `
      <tr>
        <td><strong>${id}</strong></td>
        <td><i class="fas ${icon} device-icon text-primary"></i><strong>${deviceLabel}</strong></td>
        <td><span class="status-badge ${statusClass}">${state}</span></td>
        <td><small class="text-muted">${timeText}</small></td>
      </tr>`;
  }).join('');

  dataBody.innerHTML = rows;
}

// Go to page function
window.goToPage = function(p) {
  p = Math.max(1, Math.min(totalPages, parseInt(p) || 1));
  fetchActions(p);
};

// Initialize when DOM is ready
// Kh·ªüi t·∫°o khi DOM ƒë√£ s·∫µn s√†ng
window.onPageLoad(() => {
  // Ensure default values
  // ƒê·∫£m b·∫£o gi√° tr·ªã m·∫∑c ƒë·ªãnh
  const deviceFilter = document.getElementById('deviceFilter');
  const stateFilter = document.getElementById('stateFilter');
  if (deviceFilter && !deviceFilter.value) deviceFilter.value = 'all'; // M·∫∑c ƒë·ªãnh t·∫•t c·∫£ thi·∫øt b·ªã
  if (stateFilter && !stateFilter.value) stateFilter.value = 'all'; // M·∫∑c ƒë·ªãnh t·∫•t c·∫£ tr·∫°ng th√°i
  // pageSizeSelect s·∫Ω ƒë∆∞·ª£c set gi√° tr·ªã trong setupPageSizeSelector()

  window.initializeActionHistory(); // G·ªçi h√†m kh·ªüi t·∫°o
});

window.logLoaded("Action History functions"); // Th√¥ng b√°o c√°c h√†m l·ªãch s·ª≠ h√†nh ƒë·ªông ƒë√£ t·∫£i
