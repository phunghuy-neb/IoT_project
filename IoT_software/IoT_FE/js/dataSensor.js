// ========== DATA SENSOR PAGE LOGIC ==========
// Logic cho trang hi·ªÉn th·ªã d·ªØ li·ªáu c·∫£m bi·∫øn

// State & Config
// C√°c bi·∫øn tr·∫°ng th√°i v√† c·∫•u h√¨nh
let currentPage = 1; // Trang hi·ªán t·∫°i
let totalPages = 1; // T·ªïng s·ªë trang
let rowsPerPage = 10; // S·ªë d√≤ng m·ªói trang
let currentSortField = "time"; // Tr∆∞·ªùng s·∫Øp x·∫øp hi·ªán t·∫°i
let currentSortOrder = "desc"; // Th·ª© t·ª± s·∫Øp x·∫øp hi·ªán t·∫°i (gi·∫£m d·∫ßn)

// Initialize data sensor page
// H√†m kh·ªüi t·∫°o trang d·ªØ li·ªáu c·∫£m bi·∫øn
window.initializeDataSensor = async function() {
  console.log("üöÄ Initializing Data Sensor page..."); // Th√¥ng b√°o b·∫Øt ƒë·∫ßu kh·ªüi t·∫°o
  
  // Load navbar component
  await window.loadNavbar('datasensor'); // T·∫£i navbar v·ªõi active page
  
  // Setup page limit selector
  setupPageLimitSelector(); // Thi·∫øt l·∫≠p dropdown ch·ªçn s·ªë d√≤ng m·ªói trang
  
  // Setup event listeners
  setupEventListeners(); // Thi·∫øt l·∫≠p c√°c event listener
  
  // Load initial data
  fetchData(); // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
  
  console.log("‚úÖ Data Sensor page initialized"); // Th√¥ng b√°o kh·ªüi t·∫°o th√†nh c√¥ng
};

// Setup page limit selector
// H√†m thi·∫øt l·∫≠p dropdown ch·ªçn s·ªë d√≤ng m·ªói trang (s·ª≠ d·ª•ng component chung)
function setupPageLimitSelector() {
  // S·ª≠ d·ª•ng component chung t·ª´ pagination.js
  const select = window.createPageSizeSelector(rowsPerPage, 'page-limit-box');
  
  // G·∫Øn event listener cho select
  if (select) {
    select.addEventListener("change", (e) => {
      rowsPerPage = +e.target.value; // C·∫≠p nh·∫≠t s·ªë d√≤ng m·ªói trang
      currentPage = 1; // Reset v·ªÅ trang 1
      fetchData(); // T·∫£i l·∫°i d·ªØ li·ªáu
    });
  }
}

// Setup event listeners
// H√†m thi·∫øt l·∫≠p c√°c event listener (s·ª≠ d·ª•ng component chung)
function setupEventListeners() {
  // S·ª≠ d·ª•ng component chung ƒë·ªÉ setup search form listeners
  window.setupSearchFormListeners({
    searchBtnId: "search-btn",     // ID n√∫t t√¨m ki·∫øm
    searchInputId: "search-text",  // ID √¥ nh·∫≠p t√¨m ki·∫øm
    filterIds: ["filter-type"],    // M·∫£ng ID c√°c dropdown filter
    onSearch: () => {              // Callback khi search
      currentPage = 1;             // Reset v·ªÅ trang 1
      fetchData();                 // T·∫£i l·∫°i d·ªØ li·ªáu
    }
  });
}

// Fetch data from API
// H√†m l·∫•y d·ªØ li·ªáu t·ª´ API
async function fetchData() {
  try {
    const type = document.getElementById("filter-type").value; // L·∫•y lo·∫°i l·ªçc
    const search = document.getElementById("search-text").value.trim(); // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm

    const params = new URLSearchParams({
      type, // Lo·∫°i d·ªØ li·ªáu
      search, // T·ª´ kh√≥a t√¨m ki·∫øm
      sortField: currentSortField, // Tr∆∞·ªùng s·∫Øp x·∫øp
      sortOrder: currentSortOrder, // Th·ª© t·ª± s·∫Øp x·∫øp
      page: currentPage,
      limit: rowsPerPage,
    });

    const res = await fetch(`${window.API_ROOT}/api/dataSensor?${params}`);
    if (!res.ok) {
      console.error("L·ªói API:", res.status, await res.text());
      return;
    }
    
    const result = await res.json();
    totalPages = result.totalPages || 1;
    totalPages = Math.max(1, totalPages);
    
    renderTable(result.data || []);
    window.renderPagination(currentPage, totalPages);
  } catch (err) {
    console.error("‚ùå L·ªói load data:", err);
  }
}

// Render table
function renderTable(data) {
  const headerRow = document.getElementById("table-header");
  const tbody = document.getElementById("data-body");
  if (!headerRow || !tbody) return;
  
  tbody.innerHTML = "";

  const filterType = document.getElementById("filter-type").value;
  const colLabels = { 
    temp: "üå°Ô∏è Nhi·ªát ƒë·ªô (¬∞C)", 
    hum: "üíß ƒê·ªô ·∫©m (%)", 
    light: "‚òÄÔ∏è √Ånh s√°ng (lux)" 
  };

  let cols = [];
  if (filterType === "all") cols = ["temp", "hum", "light"];
  else cols = [filterType];

  // Build header
  let headerHtml = "<tr><th>ID</th>";
  cols.forEach(c => {
    const active = currentSortField === c;
    const label = colLabels[c];
    headerHtml += `
      <th>
        ${label}
        <div class="dropdown d-inline">
          <button class="sort-btn dropdown-toggle ms-1" data-bs-toggle="dropdown" aria-expanded="false">
            ${active ? (currentSortOrder === "asc" ? '‚Üë' : '‚Üì') : ""}
          </button>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#" onclick="changeSort('${c}', '')">--</a></li>
            <li><a class="dropdown-item" href="#" onclick="changeSort('${c}', 'desc')">‚Üì</a></li>
            <li><a class="dropdown-item" href="#" onclick="changeSort('${c}', 'asc')">‚Üë</a></li>
          </ul>
        </div>
      </th>`;
  });
  headerHtml += `<th>‚è± Th·ªùi gian</th>`;
  headerHtml += "</tr>";
  headerRow.innerHTML = headerHtml;

  // Render body
  if (!data || data.length === 0) {
    tbody.innerHTML = `<tr><td colspan="${cols.length + 2}" class="text-center small">Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p</td></tr>`;
    return;
  }

  data.forEach(rec => {
    let row = `<td>${rec.id}</td>`;
    cols.forEach(col => {
      row += `<td>${rec[col] ?? "-"}</td>`;
    });
    row += `<td>${rec.time ? window.formatDate(new Date(rec.time)) : "-"}</td>`;
    tbody.innerHTML += `<tr>${row}</tr>`;
  });
}

// Change sort
window.changeSort = function(field, order) {
  if (order === "") {
    currentSortField = "time";
    currentSortOrder = "desc";
  } else {
    currentSortField = field;
    currentSortOrder = order;
  }
  currentPage = 1;
  fetchData();
};

// Go to page
// H√†m chuy·ªÉn trang
window.goToPage = function(p) {
  if (p >= 1 && p <= totalPages) {
    currentPage = p; // C·∫≠p nh·∫≠t trang hi·ªán t·∫°i
    fetchData(); // T·∫£i d·ªØ li·ªáu trang m·ªõi
  }
};

// Initialize when DOM is ready
// Kh·ªüi t·∫°o khi DOM ƒë√£ s·∫µn s√†ng
window.onPageLoad(() => {
  window.initializeDataSensor(); // G·ªçi h√†m kh·ªüi t·∫°o
});

window.logLoaded("Data Sensor functions"); // Th√¥ng b√°o c√°c h√†m d·ªØ li·ªáu c·∫£m bi·∫øn ƒë√£ t·∫£i
