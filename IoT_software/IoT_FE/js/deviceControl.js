// ========== DEVICE CONTROL FUNCTIONS ==========
// C√°c h√†m ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã IoT

// ========== LOADING STATE MANAGEMENT ==========
// Qu·∫£n l√Ω tr·∫°ng th√°i loading cho c√°c thi·∫øt b·ªã
window.loadingStates = new Map();
// Tr·∫°ng th√°i mong mu·ªën ƒëang ch·ªù ACK t·ª´ backend
window.pendingActions = window.pendingActions || new Map(); // Map<device, "ON"|"OFF">
window.inflightByDevice = window.inflightByDevice || new Map(); // Map<device, { timeoutId:number }>

// H√†m qu·∫£n l√Ω loading state
window.setLoadingState = function(device, action, isLoading) {
  const key = `${device}-${action}`;
  if (isLoading) {
    window.loadingStates.set(key, { timestamp: Date.now() });
  } else {
    window.loadingStates.delete(key);
  }
};

// H√†m ki·ªÉm tra loading state
window.isLoading = function(device, action) {
  const key = `${device}-${action}`;
  return window.loadingStates.has(key);
};

// H√†m clear loading state
window.clearLoadingState = function(device, action) {
  const key = `${device}-${action}`;
  window.loadingStates.delete(key);
};

// G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã l√™n server
// device: key (vd "quat"), action: "ON" ho·∫∑c "OFF"
// H√†m g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã l√™n backend
window.controlDevice = async function(device, action) {
  console.log(`üéØ Control device called: ${device} -> ${action}`);
  if (window.pendingActions.get(device)) {
    console.log("‚è≠Ô∏è B·ªè qua click v√¨ thi·∫øt b·ªã ƒëang pending:", device);
    return;
  }
  
  const button = document.querySelector(`[data-device="${device}"][data-action="${action}"]`); // T√¨m n√∫t ƒë∆∞·ª£c nh·∫•n
  
  console.log("üîç Button found:", button);
  
  if (!button) {
    console.error(`‚ùå Button not found for ${device} ${action}`);
    return;
  }
  
  // ‚úÖ L∆∞u tr·∫°ng th√°i c≈© ƒë·ªÉ kh√¥i ph·ª•c n·∫øu c√≥ l·ªói
  const card = document.getElementById(`card-${device}`);
  const statusEl = card.querySelector("span");
  const icon = card.querySelector("i");
  const [btnOn, btnOff] = card.querySelectorAll("button");
  const oldState = statusEl.innerText;
  
  try {
    // ‚úÖ B·∫ÆT ƒê·∫¶U LOADING
    button.disabled = true;
    button.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>`;
    button.classList.add("loading");
    window.setLoadingState(device, action, true);
    window.pendingActions.set(device, action);
    // Kh√≥a c·∫£ 2 n√∫t c·ªßa thi·∫øt b·ªã trong l√∫c ch·ªù ACK
    btnOn.disabled = true;
    btnOff.disabled = true;

    // ‚úÖ IMMEDIATE FEEDBACK - C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c (optimistic update)
    statusEl.innerText = action;
    const deviceConfig = window.devices.find(d => d.key === device);
    if (action === "ON") {
      icon.classList.add(deviceConfig.effect);
      btnOn.style.opacity = "1";
      btnOff.style.opacity = "0.5";
    } else {
      icon.classList.remove(deviceConfig.effect);
      btnOff.style.opacity = "1";
      btnOn.style.opacity = "0.5";
    }

    // ‚úÖ TIMEOUT THEO THI·∫æT B·ªä - H·ª£p nh·∫•t c√°c l·∫ßn b·∫•m li√™n ti·∫øp (3s)
    const prev = window.inflightByDevice.get(device);
    if (prev && prev.timeoutId) clearTimeout(prev.timeoutId);
    const deviceTimeoutId = setTimeout(() => {
      // H·∫øt h·∫°n ch·ªù ACK: m·ªü n√∫t v√† tho√°t tr·∫°ng th√°i loading
      button.innerHTML = action;
      button.disabled = false;
      button.classList.remove("loading");
      btnOn.disabled = false;
      btnOff.disabled = false;
      window.clearLoadingState(device, action);
      window.pendingActions.delete(device);
      window.inflightByDevice.delete(device);
      console.log("‚è∞ Device timeout - restored buttons");
    }, 3000);
    window.inflightByDevice.set(device, { timeoutId: deviceTimeoutId });

    // G·ª≠i y√™u c·∫ßu ƒëi·ªÅu khi·ªÉn l√™n server
    console.log("üì§ Sending API request:", `${window.API_ROOT}/api/control`);
    console.log("üì§ Request body:", { device, action });
    
    const result = await window.fetchJson(`${window.API_ROOT}/api/control`, {
      method: "POST", // Ph∆∞∆°ng th·ª©c POST
      headers: { "Content-Type": "application/json" }, // Header JSON
      body: JSON.stringify({ device, action }), // Body ch·ª©a thi·∫øt b·ªã v√† h√†nh ƒë·ªông
    });
    
    console.log("‚úÖ API response:", result);
    
    // ‚úÖ Gi·ªØ timeout theo thi·∫øt b·ªã; s·∫Ω ƒë∆∞·ª£c clear khi UI nh·∫≠n tr·∫°ng th√°i kh·ªõp

    // ‚úÖ G·ªçi nhi·ªÅu l·∫ßn refresh ng·∫Øn h·∫°n ƒë·ªÉ b·∫Øt ACK s·ªõm m√† kh√¥ng l√†m gi·∫≠t UI
    console.log(`üì§ Command sent successfully: ${device} -> ${action}`);
    if (typeof window.fetchStatuses === 'function') {
      [150, 300, 600].forEach(d => setTimeout(() => window.fetchStatuses(), d));
    }
    
  } catch (error) {
    console.warn("‚ö†Ô∏è L·ªói khi g·ª≠i l·ªánh:", error);
    
    // ‚úÖ CLEAR TIMEOUT KHI C√ì L·ªñI (theo thi·∫øt b·ªã)
    const inflight = window.inflightByDevice.get(device);
    if (inflight && inflight.timeoutId) clearTimeout(inflight.timeoutId);
    
    // ‚úÖ KH√îI PH·ª§C UI V·ªÄ TR·∫†NG TH√ÅI C≈® N·∫æU C√ì L·ªñI
    statusEl.innerText = oldState;
    const deviceConfig = window.devices.find(d => d.key === device);
    if (oldState === "ON") {
      icon.classList.add(deviceConfig.effect);
      btnOn.style.opacity = "1";
      btnOff.style.opacity = "0.5";
    } else {
      icon.classList.remove(deviceConfig.effect);
      btnOff.style.opacity = "1";
      btnOn.style.opacity = "0.5";
    }
    
    // ‚úÖ Kh√¥i ph·ª•c n√∫t n·∫øu c√≥ l·ªói
    button.disabled = false;
    button.innerHTML = action;
    button.classList.remove("loading");
    window.clearLoadingState(device, action);
    window.pendingActions.delete(device);
    window.inflightByDevice.delete(device);
  
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu ESP32 kh√¥ng k·∫øt n·ªëi
    if (error.message && error.message.includes("ESP32 not connected")) {
      alert("Thi·∫øt b·ªã kh√¥ng k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ESP32.");
    }
  }
  // ‚úÖ KH√îNG kh√¥i ph·ª•c n√∫t ·ªü ƒë√¢y n·∫øu th√†nh c√¥ng, ƒë·ªÉ polling t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
};

// C·∫≠p nh·∫≠t giao di·ªán thi·∫øt b·ªã d·ª±a tr√™n tr·∫°ng th√°i t·ª´ server
// H√†m c·∫≠p nh·∫≠t giao di·ªán thi·∫øt b·ªã d·ª±a tr√™n d·ªØ li·ªáu t·ª´ backend
window.updateDeviceUI = function(obj) {
  const esp32Connected = obj.esp32Connected; // Tr·∫°ng th√°i k·∫øt n·ªëi ESP32
  
  console.log("üîç UpdateDeviceUI called:", obj);
  console.log("üîç ESP32 Connected:", esp32Connected);
  
  window.devices.forEach(d => {
    const info = obj[d.key];                      // tr·∫°ng th√°i thi·∫øt b·ªã t·ª´ backend
    const card = document.getElementById("card-" + d.key); // Card thi·∫øt b·ªã
    const statusEl = card.querySelector("span");  // span hi·ªÉn th·ªã ON/OFF
    const icon = card.querySelector("i");         // icon ƒë·ªÉ th√™m/remove hi·ªáu ·ª©ng
    const [btnOn, btnOff] = card.querySelectorAll("button"); // C√°c n√∫t ON/OFF
    const pending = window.pendingActions.get(d.key); // "ON"|"OFF"|undefined

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi cho card
    if (esp32Connected) {
      card.classList.remove("disconnected"); // X√≥a class disconnected
    } else {
      card.classList.add("disconnected"); // Th√™m class disconnected
    }

    // ‚úÖ Disable/enable t·∫•t c·∫£ n√∫t d·ª±a tr√™n tr·∫°ng th√°i k·∫øt n·ªëi ESP32
    [btnOn, btnOff].forEach(btn => {
      const wasDisabled = btn.disabled;
      btn.disabled = !esp32Connected; // V√¥ hi·ªáu h√≥a n√∫t n·∫øu ESP32 kh√¥ng k·∫øt n·ªëi
      
      console.log(`üîç Button ${btn.dataset.device} ${btn.dataset.action}: disabled=${btn.disabled}, ESP32=${esp32Connected}`);
      
      if (!esp32Connected) {
        btn.classList.add("inactive"); // Th√™m class inactive
      } else {
        btn.classList.remove("inactive"); // X√≥a class inactive
      }
    });

    // N·∫øu ƒëang pending, v·∫´n gi·ªØ kh√≥a c·∫£ 2 n√∫t ƒë·ªÉ tr√°nh b·∫•m ch·ªìng l·ªánh
    if (pending) {
      btnOn.disabled = true;
      btnOff.disabled = true;
    }

    // N·∫øu ƒëang c√≥ h√†nh ƒë·ªông ch·ªù ACK v√† backend tr·∫£ v·ªÅ tr·∫°ng th√°i CH∆ØA kh·ªõp m·ª•c ti√™u,
    // th√¨ gi·ªØ nguy√™n optimistic UI, KH√îNG ghi ƒë√® b·∫±ng tr·∫°ng th√°i c≈© ƒë·ªÉ tr√°nh nh√°y.
    const backendState = info?.state?.toUpperCase() || "OFF";
    if (pending && backendState !== pending) {
      // Ch·ªâ c·∫≠p nh·∫≠t enable/disable n√∫t theo k·∫øt n·ªëi, gi·ªØ nguy√™n UI tr·∫°ng th√°i
    } else if (backendState === "ON") {
      // N·∫øu ON: c·∫≠p nh·∫≠t ch·ªØ, b·∫≠t hi·ªáu ·ª©ng icon
      statusEl.innerText = "ON"; // C·∫≠p nh·∫≠t text tr·∫°ng th√°i
      icon.classList.add(d.effect); // th√™m class effect (spin/on/blow)
      
      // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i: ON button s√°ng, OFF button m·ªù
      btnOn.style.opacity = "1";
      btnOff.style.opacity = "0.5";
      // N·∫øu c√≥ pending v√† ƒë√£ kh·ªõp, clear pending + loading
      if (pending && backendState === pending) {
        window.pendingActions.delete(d.key);
        window.clearLoadingState(d.key, "ON");
        window.clearLoadingState(d.key, "OFF");
      }
    } else {
      // N·∫øu OFF: ng∆∞·ª£c l·∫°i
      statusEl.innerText = "OFF"; // C·∫≠p nh·∫≠t text tr·∫°ng th√°i
      icon.classList.remove(d.effect); // X√≥a class effect
      
      // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i: OFF button s√°ng, ON button m·ªù
      btnOff.style.opacity = "1";
      btnOn.style.opacity = "0.5";
      if (pending && backendState === pending) {
        window.pendingActions.delete(d.key);
        window.clearLoadingState(d.key, "ON");
        window.clearLoadingState(d.key, "OFF");
      }
    }
    
    // ‚úÖ KH√îNG disable n√∫t n√†o c·∫£ - ƒë·ªÉ user c√≥ th·ªÉ click ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i

    // ‚úÖ X√≥a tr·∫°ng th√°i "Loading..." (icon xoay tr√≤n) n·∫øu n√∫t ƒëang hi·ªÉn th·ªã
    [btnOn, btnOff].forEach(btn => {
      if (btn.classList.contains("loading") || btn.innerHTML.includes("spinner-border")) {
        // Ch·ªâ clear loading n·∫øu kh√¥ng c√≤n pending cho device ƒë√≥
        if (!window.pendingActions.get(btn.dataset.device)) {
          btn.innerHTML = btn.dataset.action; // Tr·∫£ v·ªÅ tr·∫°ng th√°i ON/OFF
          btn.disabled = !esp32Connected; // B·∫≠t l·∫°i n√∫t n·∫øu ESP32 ƒëang k·∫øt n·ªëi
          btn.classList.remove("loading"); // X√≥a class loading
          window.clearLoadingState(btn.dataset.device, btn.dataset.action);
        }
      }
    });
  });
};

window.logLoaded("Device control functions"); // Th√¥ng b√°o c√°c h√†m ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã ƒë√£ t·∫£i
