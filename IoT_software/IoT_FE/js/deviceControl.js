// ========== DEVICE CONTROL FUNCTIONS ==========
// C√°c h√†m ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã IoT

// G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã l√™n server
// device: key (vd "quat"), action: "ON" ho·∫∑c "OFF"
// H√†m g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã l√™n backend
window.controlDevice = async function(device, action) {
  console.log(`üéØ Control device called: ${device} -> ${action}`);
  
  const button = document.querySelector(`[data-device="${device}"][data-action="${action}"]`); // T√¨m n√∫t ƒë∆∞·ª£c nh·∫•n
  
  console.log("üîç Button found:", button);
  
  if (!button) {
    console.error(`‚ùå Button not found for ${device} ${action}`);
    return;
  }
  
  try {
    // ‚úÖ Hi·ªÉn th·ªã tr·∫°ng th√°i loading b·∫±ng icon xoay tr√≤n tr√™n n√∫t ƒë∆∞·ª£c nh·∫•n
    button.disabled = true; // V√¥ hi·ªáu h√≥a n√∫t
    button.innerHTML = `<i class="fa-solid fa-spinner fa-spin"></i>`; // Hi·ªÉn th·ªã icon xoay tr√≤n
    button.classList.add("loading"); // Th√™m class ƒë·ªÉ theo d√µi tr·∫°ng th√°i loading

    // G·ª≠i y√™u c·∫ßu ƒëi·ªÅu khi·ªÉn l√™n server
    console.log("üì§ Sending API request:", `${window.API_ROOT}/api/control`);
    console.log("üì§ Request body:", { device, action });
    
    const result = await window.fetchJson(`${window.API_ROOT}/api/control`, {
      method: "POST", // Ph∆∞∆°ng th·ª©c POST
      headers: { "Content-Type": "application/json" }, // Header JSON
      body: JSON.stringify({ device, action }), // Body ch·ª©a thi·∫øt b·ªã v√† h√†nh ƒë·ªông
    });
    
    console.log("‚úÖ API response:", result);

    // ‚úÖ KH√îNG g·ªçi fetchStatuses ngay, ch·ªù ESP32 ph·∫£n h·ªìi qua polling
    // Tr·∫°ng th√°i s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ESP32 g·ª≠i ph·∫£n h·ªìi v√† polling nh·∫≠n ƒë∆∞·ª£c
    console.log(`üì§ Command sent successfully: ${device} -> ${action}`);
  } catch (error) {
    console.warn("‚ö†Ô∏è L·ªói khi g·ª≠i l·ªánh:", error);
    
    // ‚úÖ Kh√¥i ph·ª•c n√∫t n·∫øu c√≥ l·ªói
    button.disabled = false; // B·∫≠t l·∫°i n√∫t
    button.innerHTML = action; // Kh√¥i ph·ª•c text g·ªëc
    button.classList.remove("loading"); // X√≥a class loading
    
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu ESP32 kh√¥ng k·∫øt n·ªëi
    if (error.message && error.message.includes("ESP32 not connected")) {
      alert("Thi·∫øt b·ªã kh√¥ng k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ESP32.");
    }
  }
  // ‚úÖ KH√îNG kh√¥i ph·ª•c n√∫t ·ªü ƒë√¢y n·∫øu th√†nh c√¥ng, ƒë·ªÉ polling t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
};

// C·∫≠p nh·∫≠t giao di·ªán thi·∫øt b·ªã d·ª±a tr√™n tr·∫°ng th√°i t·ª´ server
// H√†m c·∫≠p nh·∫≠t giao di·ªán thi·∫øt b·ªã d·ª±a tr√™n d·ªØ li·ªáu t·ª´ backend
window.updateDeviceUI = function(obj) {
  const esp32Connected = obj.esp32Connected; // Tr·∫°ng th√°i k·∫øt n·ªëi ESP32
  
  console.log("üîç UpdateDeviceUI called:", obj);
  console.log("üîç ESP32 Connected:", esp32Connected);
  
  window.devices.forEach(d => {
    const info = obj[d.key];                      // tr·∫°ng th√°i thi·∫øt b·ªã t·ª´ backend
    const card = document.getElementById("card-" + d.key); // Card thi·∫øt b·ªã
    const statusEl = card.querySelector("span");  // span hi·ªÉn th·ªã ON/OFF
    const icon = card.querySelector("i");         // icon ƒë·ªÉ th√™m/remove hi·ªáu ·ª©ng
    const [btnOn, btnOff] = card.querySelectorAll("button"); // C√°c n√∫t ON/OFF

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi cho card
    if (esp32Connected) {
      card.classList.remove("disconnected"); // X√≥a class disconnected
    } else {
      card.classList.add("disconnected"); // Th√™m class disconnected
    }

    // ‚úÖ Disable/enable t·∫•t c·∫£ n√∫t d·ª±a tr√™n tr·∫°ng th√°i k·∫øt n·ªëi ESP32
    [btnOn, btnOff].forEach(btn => {
      const wasDisabled = btn.disabled;
      btn.disabled = !esp32Connected; // V√¥ hi·ªáu h√≥a n√∫t n·∫øu ESP32 kh√¥ng k·∫øt n·ªëi
      
      console.log(`üîç Button ${btn.dataset.device} ${btn.dataset.action}: disabled=${btn.disabled}, ESP32=${esp32Connected}`);
      
      if (!esp32Connected) {
        btn.classList.add("inactive"); // Th√™m class inactive
      } else {
        btn.classList.remove("inactive"); // X√≥a class inactive
      }
    });

    if (info?.state?.toUpperCase() === "ON") {
      // N·∫øu ON: c·∫≠p nh·∫≠t ch·ªØ, b·∫≠t hi·ªáu ·ª©ng icon
      statusEl.innerText = "ON"; // C·∫≠p nh·∫≠t text tr·∫°ng th√°i
      icon.classList.add(d.effect); // th√™m class effect (spin/on/blow)
      
      // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i: ON button s√°ng, OFF button m·ªù
      btnOn.style.opacity = "1";
      btnOff.style.opacity = "0.5";
    } else {
      // N·∫øu OFF: ng∆∞·ª£c l·∫°i
      statusEl.innerText = "OFF"; // C·∫≠p nh·∫≠t text tr·∫°ng th√°i
      icon.classList.remove(d.effect); // X√≥a class effect
      
      // Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i: OFF button s√°ng, ON button m·ªù
      btnOff.style.opacity = "1";
      btnOn.style.opacity = "0.5";
    }
    
    // ‚úÖ KH√îNG disable n√∫t n√†o c·∫£ - ƒë·ªÉ user c√≥ th·ªÉ click ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i

    // ‚úÖ X√≥a tr·∫°ng th√°i "Loading..." (icon xoay tr√≤n) n·∫øu n√∫t ƒëang hi·ªÉn th·ªã
    [btnOn, btnOff].forEach(btn => {
      if (btn.classList.contains("loading") || btn.innerHTML.includes("fa-spinner")) {
        btn.innerHTML = btn.dataset.action; // Tr·∫£ v·ªÅ tr·∫°ng th√°i ON/OFF
        btn.disabled = !esp32Connected; // B·∫≠t l·∫°i n√∫t n·∫øu ESP32 ƒëang k·∫øt n·ªëi
        btn.classList.remove("loading"); // X√≥a class loading
      }
    });
  });
};

window.logLoaded("Device control functions"); // Th√¥ng b√°o c√°c h√†m ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã ƒë√£ t·∫£i
