// ========== UTILITY FUNCTIONS ==========
// C√°c h√†m ti·ªán √≠ch d√πng chung cho to√†n b·ªô ·ª©ng d·ª•ng

// H√†m render danh s√°ch thi·∫øt b·ªã v√†o #device-list
// T·∫°o HTML cho m·ªói thi·∫øt b·ªã: icon, tr·∫°ng th√°i, n√∫t ON/OFF
window.renderDevices = function() {
  console.log("üéØ Rendering devices...", window.devices);
  
  const deviceListEl = document.getElementById("device-list");
  if (!deviceListEl) {
    console.error("‚ùå Device list element not found!");
    return;
  }
  
  // T·∫°o HTML cho t·ª´ng thi·∫øt b·ªã trong danh s√°ch
  deviceListEl.innerHTML = window.devices.map(d => `
    <div class="device-card" id="card-${d.key}">
      <div>
        <i class="fa-solid ${d.icon} me-2"></i> <!-- Icon thi·∫øt b·ªã -->
        <span id="status-${d.key}">OFF</span> <!-- Hi·ªÉn th·ªã tr·∫°ng th√°i ON/OFF -->
        <div class="small text-muted">${d.label}</div> <!-- T√™n thi·∫øt b·ªã -->
      </div>
      <div>
        <button class="btn btn-success inactive me-1" data-device="${d.key}" data-action="ON">ON</button> <!-- N√∫t b·∫≠t -->
        <button class="btn btn-danger" data-device="${d.key}" data-action="OFF">OFF</button> <!-- N√∫t t·∫Øt -->
      </div>
    </div>
  `).join("");

  // G·∫Øn s·ª± ki·ªán click cho t·∫•t c·∫£ n√∫t ON/OFF v·ª´a render
  const buttons = document.querySelectorAll("#device-list button");
  console.log("üîç Attaching events to buttons:", buttons.length);
  
  buttons.forEach(btn => {
    console.log(`üîç Button: ${btn.dataset.device} ${btn.dataset.action}`);
    console.log(`üîç Button disabled: ${btn.disabled}, opacity: ${btn.style.opacity}`);
    
    btn.addEventListener("click", (e) => {
      console.log(`üéØ Button clicked: ${btn.dataset.device} ${btn.dataset.action}`);
      console.log(`üîç Event target:`, e.target);
      console.log(`üîç Button disabled: ${btn.disabled}`);
      
      if (btn.disabled) {
        console.log("‚ö†Ô∏è Button is disabled, ignoring click");
        return;
      }
      
      window.controlDevice(btn.dataset.device, btn.dataset.action);
    });
  });
};

// Format date for display
// H√†m ƒë·ªãnh d·∫°ng ng√†y th√°ng ƒë·ªÉ hi·ªÉn th·ªã
window.formatDate = function(date) {
  if (!date) return '-'; // Tr·∫£ v·ªÅ '-' n·∫øu kh√¥ng c√≥ ng√†y
  const d = new Date(date); // Chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªëi t∆∞·ª£ng Date
  if (isNaN(d)) return '-'; // Tr·∫£ v·ªÅ '-' n·∫øu ng√†y kh√¥ng h·ª£p l·ªá
  
  // ƒê·ªãnh d·∫°ng c√°c th√†nh ph·∫ßn ng√†y th√°ng
  const dd = String(d.getDate()).padStart(2, '0'); // Ng√†y (2 ch·ªØ s·ªë)
  const mm = String(d.getMonth() + 1).padStart(2, '0'); // Th√°ng (2 ch·ªØ s·ªë)
  const yy = String(d.getFullYear()).slice(-2); // NƒÉm (2 ch·ªØ s·ªë cu·ªëi)
  const HH = String(d.getHours()).padStart(2, '0'); // Gi·ªù (2 ch·ªØ s·ªë)
  const Min = String(d.getMinutes()).padStart(2, '0'); // Ph√∫t (2 ch·ªØ s·ªë)
  const SS = String(d.getSeconds()).padStart(2, '0'); // Gi√¢y (2 ch·ªØ s·ªë)
  
  return `${dd}/${mm}/${yy} ${HH}:${Min}:${SS}`; // Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng dd/mm/yy HH:MM:SS
};

// Debounce function for search inputs
// H√†m debounce ƒë·ªÉ tr√°nh g·ªçi API qu√° nhi·ªÅu l·∫ßn khi ng∆∞·ªùi d√πng g√µ
window.debounce = function(func, wait) {
  let timeout; // Bi·∫øn l∆∞u tr·ªØ timeout
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout); // X√≥a timeout c≈©
      func(...args); // G·ªçi h√†m th·ª±c t·∫ø
    };
    clearTimeout(timeout); // X√≥a timeout hi·ªán t·∫°i
    timeout = setTimeout(later, wait); // T·∫°o timeout m·ªõi
  };
};

// Show loading state
// H√†m hi·ªÉn th·ªã tr·∫°ng th√°i loading tr√™n n√∫t
window.showLoading = function(element) {
  element.disabled = true; // V√¥ hi·ªáu h√≥a n√∫t
  element.innerHTML = `<i class="fa-solid fa-spinner fa-spin"></i>`; // Hi·ªÉn th·ªã icon xoay tr√≤n
  element.classList.add("loading"); // Th√™m class loading
};

// Hide loading state
// H√†m ·∫©n tr·∫°ng th√°i loading tr√™n n√∫t
window.hideLoading = function(element, originalText) {
  element.disabled = false; // B·∫≠t l·∫°i n√∫t
  element.innerHTML = originalText; // Kh√¥i ph·ª•c text g·ªëc
  element.classList.remove("loading"); // X√≥a class loading
};

// Show notification
// H√†m hi·ªÉn th·ªã th√¥ng b√°o
window.showNotification = function(message, type = 'info') {
  // Simple notification - c√≥ th·ªÉ m·ªü r·ªông th√†nh toast notification
  console.log(`[${type.toUpperCase()}] ${message}`); // In th√¥ng b√°o ra console
  
  // C√≥ th·ªÉ th√™m toast notification ·ªü ƒë√¢y
  // const toast = document.createElement('div');
  // toast.className = `toast toast-${type}`;
  // toast.textContent = message;
  // document.body.appendChild(toast);
  // setTimeout(() => toast.remove(), 3000);
};

// Setup common event listeners for search forms
// H√†m thi·∫øt l·∫≠p event listeners chung cho form t√¨m ki·∫øm
window.setupSearchFormListeners = function(config) {
  const {
    searchBtnId,        // ID c·ªßa n√∫t t√¨m ki·∫øm
    searchInputId,      // ID c·ªßa √¥ nh·∫≠p t√¨m ki·∫øm  
    filterIds = [],     // M·∫£ng c√°c ID dropdown filter
    onSearch           // Callback function khi search
  } = config;

  // Search button click
  // X·ª≠ l√Ω click n√∫t t√¨m ki·∫øm
  if (searchBtnId) {
    const searchBtn = document.getElementById(searchBtnId);
    if (searchBtn) {
      searchBtn.addEventListener("click", () => onSearch());
    }
  }

  // Search input Enter key
  // X·ª≠ l√Ω ph√≠m Enter trong √¥ t√¨m ki·∫øm
  if (searchInputId) {
    const searchInput = document.getElementById(searchInputId);
    if (searchInput) {
      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          e.preventDefault(); // NgƒÉn submit form
          onSearch(); // G·ªçi callback
        }
      });
    }
  }

  // Filter dropdowns change
  // X·ª≠ l√Ω thay ƒë·ªïi dropdown filter
  filterIds.forEach(filterId => {
    const filterElement = document.getElementById(filterId);
    if (filterElement) {
      filterElement.addEventListener("change", () => onSearch());
    }
  });
};

// Load navbar component
// H√†m t·∫£i component navbar chung
window.loadNavbar = async function(activePage = '') {
  try {
    const response = await fetch('components/navbar.html');
    const navbarHtml = await response.text();
    
    const navbarContainer = document.getElementById('navbar-container');
    if (navbarContainer) {
      navbarContainer.innerHTML = navbarHtml;
      
      // Set active page
      if (activePage) {
        const activeLink = document.getElementById(`nav-${activePage}`);
        if (activeLink) {
          activeLink.classList.add('active');
        }
      }
    }
  } catch (error) {
    console.error('Error loading navbar:', error);
  }
};

// Log loaded module
// H√†m th√¥ng b√°o module ƒë√£ t·∫£i
window.logLoaded = function(moduleName) {
  console.log(`‚úÖ ${moduleName} loaded`); // Th√¥ng b√°o module ƒë√£ t·∫£i
};

// Page load utility
// H√†m ti·ªán √≠ch cho DOMContentLoaded
window.onPageLoad = function(initFunction) {
  document.addEventListener('DOMContentLoaded', initFunction);
};

// Common table renderer
// Component render b·∫£ng chung cho c√°c trang
window.renderCommonTable = function(data, config) {
  const {
    containerId,     // ID container b·∫£ng
    columns,         // M·∫£ng c·∫•u h√¨nh c·ªôt
    emptyMessage = "Kh√¥ng c√≥ d·ªØ li·ªáu", // Th√¥ng b√°o khi r·ªóng
    startIndex = 0   // Index b·∫Øt ƒë·∫ßu (cho pagination)
  } = config;
  
  const container = document.getElementById(containerId);
  if (!container) return;
  
  if (!data || !data.length) {
    container.innerHTML = `<tr><td colspan="${columns.length}" class="text-center small">${emptyMessage}</td></tr>`;
    return;
  }
  
  const rows = data.map((item, idx) => {
    const id = startIndex + idx + 1;
    const cells = columns.map(col => {
      if (col.render) {
        return col.render(item, id);
      }
      return `<td>${item[col.field] || '-'}</td>`;
    }).join('');
    
    return `<tr>${cells}</tr>`;
  }).join('');
  
  container.innerHTML = rows;
};

// DOM Query Cache - T·ªëi ∆∞u
// Cache DOM queries ƒë·ªÉ tr√°nh query l·∫°i nhi·ªÅu l·∫ßn
window.domCache = new Map(); // Cache DOM elements

// Optimized DOM query function
// H√†m query DOM t·ªëi ∆∞u v·ªõi cache
window.queryDOM = function(selector, useCache = true) {
  if (useCache && window.domCache.has(selector)) {
    return window.domCache.get(selector);
  }
  
  const element = document.querySelector(selector);
  if (element && useCache) {
    window.domCache.set(selector, element);
  }
  
  return element;
};

// Batch DOM queries - T·ªëi ∆∞u
// Query nhi·ªÅu elements c√πng l√∫c
window.queryDOMBatch = function(selectors) {
  const results = {};
  selectors.forEach(selector => {
    results[selector] = window.queryDOM(selector);
  });
  return results;
};

// Clear DOM cache
// X√≥a cache DOM khi c·∫ßn
window.clearDOMCache = function() {
  window.domCache.clear();
};

// Error Handler - T·ªëi ∆∞u
// X·ª≠ l√Ω l·ªói to√†n c·ª•c
window.globalErrorHandler = function(error, context = '') {
  console.error(`‚ùå Error in ${context}:`, error);
  
  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho user (optional)
  if (window.showErrorNotification) {
    window.showErrorNotification(`L·ªói ${context}: ${error.message}`);
  }
};

// Performance Monitor - T·ªëi ∆∞u
// Theo d√µi hi·ªáu su·∫•t
window.performanceMonitor = {
  start: function(label) {
    this[label] = performance.now();
  },
  
  end: function(label) {
    if (this[label]) {
      const duration = performance.now() - this[label];
      console.log(`‚è±Ô∏è ${label}: ${duration.toFixed(2)}ms`);
      delete this[label];
      return duration;
    }
  }
};

// Memory Cleanup - T·ªëi ∆∞u
// D·ªçn d·∫πp memory ƒë·ªãnh k·ª≥
window.memoryCleanup = function() {
  // Clear old cache entries
  if (window.requestCache) {
    const now = Date.now();
    for (const [key, value] of window.requestCache.entries()) {
      if (now - value.timestamp > 30000) { // 30s
        window.requestCache.delete(key);
      }
    }
  }
  
  // Clear DOM cache if too large
  if (window.domCache && window.domCache.size > 50) {
    window.domCache.clear();
  }
  
  // Force garbage collection hint
  if (window.gc) window.gc();
};

// Auto cleanup every 5 minutes
setInterval(window.memoryCleanup, 5 * 60 * 1000);

console.log("‚úÖ Utility functions loaded"); // Th√¥ng b√°o c√°c h√†m ti·ªán √≠ch ƒë√£ t·∫£i
